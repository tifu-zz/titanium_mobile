- namespace

Titanium.UI.TableView

- type

object

- subtype

view

- description

A Table View allows you to create a scrollable table of content in a list-based fashion. The Table View is created by the method `Titanium.UI.createTableView`.

- since

0.8

- platforms

android, iphone, ipad

- properties

backgroundColor[string]: the background color of the table view
backgroundImage[string]: the background image to render in the background of the table view
separatorStyle[int]: the separator style constant. For iPhone, Titanium.UI.iPhone.TableViewSeparatorStyle
separatorColor[string]: the separator color color as a hex or named value
headerTitle[string]: the table view header title
footerTitle[string]: the table view footer title
headerView[object]: the table view header as a view that will be rendered instead of a label
footerView[object]: the table view footer as a view that will be rendered instead of a label
search[object]: the search field to use for the table view
searchHidden[boolean]: boolean to control the visibility of the search field
filterAttribute[string]: the filter attribute to be used when searching. this property maps to your data object or a property on the row object
filterCaseInsensitive[boolean]: boolean to indicate if the search should be case sensitive or case insensitive (default)
index[array]: an array of objects (with title and index properties) to control the table view index
editable[boolean]: allow the table view to be editable (this must be true for swipe-to-delete) (iOS Only)
editing[boolean]: boolean to control the editing state of the table view (iOS Only)
moving[boolean]: boolean to control the moveable state of the table view (iOS Only)
rowHeight[float]: default row height for table view rows
minRowHeight[float]: min row height for table view rows
maxRowHeight[float]: max row height for table view rows
data[array]: the data array of objects to be used for the rows of the table view
style[int]: iPhone only. the style of the table view. constant from `Titanium.UI.iPhone.TableViewStyle`
allowsSelection[boolean]: true if the rows can be selected
allowsSelectionDuringEditing[boolean]: true if the rows can be selected while editing the table (iOS Only)
scrollable[boolean]: true (default) if tableview can be scrolled
showVerticalScrollIndicator[boolean]: true (default) if tableview displays vertical scroll indicator (iOS Only)
- methods

setData: set the data in the table, optionally with animation
appendRow: append a row to the table, optionally with animation
updateRow: update an existing row, optionally with animation
deleteRow: delete an existing row, optionally with animation
insertRowAfter: insert a row before another row, optionally with animation
insertRowBefore: insert a row after another row, optionally with animation
scrollToIndex: scroll to a specific row index and ensure that that row is on screen
scrollToTop: scroll the table to a specific top position where 0 is the topmost y position in the table view
selectRow: programmatically select a row
deselectRow: programmatically deselect a row

- method : selectRow

row[int]: row index to select

- method : deselectRow

row[int]: row index to deselect


- method : scrollToTop

top[float]: y position
properties[object]: optional dictionary with the key `animated` (default, true) as boolean to indicate if the scroll should be animated or immediate

- method : setData

data[array]: data array of rows either as objects or row objects
properties[object]: animation properties

- method : appendRow

row[object]: row to append
properties[object]: animation properties

- method : updateRow

row[object]: row data to update
properties[object]: animation properties

- method : deleteRow

row[int]: index of row to delete
properties[object]: animation properties

- method : insertRowAfter

index[int]: index
row[object]: row to insert
properties[object]: animation properties

- method : insertRowBefore

index[int]: index
row[object]: row to insert
properties[object]: animation properties

- method : scrollToIndex

index[int]: index
properties[object]: animation properties. `position` property controls the position constant to use for position (on iPhone, use constants from Titanium.UI.iPhone.TableViewScrollPosition).


- events

delete: fired when a table row is delete by the user
move: fired when a table row is moved by the user
click: fired when a table row is clicked
scroll: fired when the table view is scrolled
scrollEnd: fired when the table view stops scrolling

- event : delete

index: table view row index
section: table view section object
row: table view row object
detail: boolean to indicate if the right area was clicked
searchMode: boolean to indicate if the table is in search mode
rowData: table view row data object

- event : move

index: table view row index
section: table view section object
row: table view row object
detail: boolean to indicate if the right area was clicked
searchMode: boolean to indicate if the table is in search mode
rowData: table view row data object

- event : click

index: table view row index
section: table view section object
row: table view row object
detail: boolean to indicate if the right area was clicked
searchMode: boolean to indicate if the table is in search mode
rowData: table view row data object

- event : scroll

contentOffset: dictionary with `x` and `y` properties containing the content offset (iOS only)
contentSize: dictionary with `width` and `height` properties containing the size of the content (regardless of the display size in the case of scrolling) (iOS only)
size: dictionary with `width` and `height` properties containing the size of the visible table view
firstVisibleItem: the row index of the topmost visible row in the view (Android only)
visibleItemCount: the number of rows currently visible in the view (Android only)
totalItemCount: the total number of rows in the view (Android only)

- event : scrollEnd

contentOffset: dictionary with `x` and `y` properties containing the content offset (iOS only)
contentSize: dictionary with `width` and `height` properties containing the size of the content (regardless of the display size in the case of scrolling) (iOS only)
size: dictionary with `width` and `height` properties containing the size of the visible table view

- example : Simple Table View with basic rows

The most basic example of a table view.

~~~
var data = [{title:"Row 1"},{title:"Row 2"}];
var table = Titanium.UI.createTableView({data:data});
win.add(table);
~~~

