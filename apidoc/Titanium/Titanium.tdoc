- namespace

Titanium

- type

module

- description

The top level Titanium module.

- since

0.1

- platforms

android, iphone, ipad

- properties

userAgent[string]: the user-agent string used by Titanium
version[string]: the version of Titanium that is executing

- methods

include: one or more filenames to include as if the Javascript code was written in place.  This is similar to a C `#include` function.
createBuffer: creates a new buffer based on the params

- method : include

name[string]: filename to include

- method : createBuffer, `Titanium.Buffer`
params[object]: Key value pairs.  You can include: `value`, an optional initial value which will be encoded and placed in the buffer.  If value is a Number, `type` must also be set. This is simply a convenient way of calling `Titanium.Codec.encodeString` or `Titanium.Codec.encodeNumber` and placing the encoded value in the returned buffer.  `length`: the length of the buffer, with a default of 0 unless `value` is specified, in which case the length of the encoded `value`.  `type`, the type of data encoding to use with `value`, with `Titanium.Codec.CHARSET_UTF8` being the default if `value` is a String, else this argument is required in the case of `value` being a number.  `byteOrder`, the byte order of this buffer, with the default being the OS native byte order is used by default (see `Titanium.Codec.getNativeByteOrder`).

- notes

Titanium provides a number of built-in objects in the Javascript that are not part of the Titanium namespace.  Specifically, the following are available.

#### JSON

Titanium has a built-in JSON parser with two main functions: `parse` and `stringify`.  `JSON.parse` will safely evaluate a string encoded as Javascript into a Javascript object.  `JSON.stringify` will encode a Javascript object into a string.

#### Timers

Titanium has built-in support for one-shot and repeating timers with two main functions: `setTimeout` and `setInterval`.  `setTimeout` takes 2 arguments: function and timeout in milliseconds after which the function should be executed and returns a timer handle that can be used to cancel a pending timer with `clearTimeout`.  `setInterval` takes 2 arguments: function and timeout in milliseconds for how often the function should be executed until cancelled and returns a timer handle that can be used to cancel a timer with `clearInterval`.

#### Alert

Titanium has a built-in convenience function `alert` which can be used as a shortcut to [[Titanium.UI.createAlertDialog]] for creating a message box.  Note that unlike a web browser-based version of `alert`, the method is asynchronous. However, only one alert dialog will be visible and modal at a time.

#### Locale

The macro `L` can also be used which aliases the method [[Titanium.Locale.getString]].

#### String formatting

The following are built-in functions available on the `String` class which are Titanium specific and will aid in formatting strings into a locale-specific string.

`String.format`: format a generic string using the [IEEE printf specification](http://www.opengroup.org/onlinepubs/009695399/functions/printf.html).

`String.formatDate`: format a date into a locale specific date format. Optionally pass a second argument (string) as either "short" (default), "medium" or "long" for controlling the date format.

`String.formatTime`: format a date into a locale specific time format.

`String.formatDecimal`: format a number into a locale specific decimal format.

`String.formatCurrency`: format a number into a locale specific currency format.


